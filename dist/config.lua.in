-- Luadist configuration

module ("dist.config", package.seeall)

local path = require "pl.path"
local utils = require "dist.utils"

-- System information ------------------------------------------------
version       = "@DIST_VERSION@"   -- Current LuaDist version
platform      = {"unix", "linux"}
lua_version   = _VERSION:gsub("Lua ", "")

-- Directories -------------------------------------------------------
root_dir      = os.getenv("DIST_ROOT") or utils.get_luadist_location() or path.sep -- Should be always absolute (is it?) FIXME
temp_dir      = path.join(root_dir, "tmp")

-- Files -------------------------------------------------------------
manifest_filename   = "manifest-file"
log_file            = path.join(temp_dir, "luadist.log")
local_manifest_file = path.join(root_dir, "share", manifest_filename)

-- Repositories ------------------------------------------------------
manifest_repos = {
    "git://gist.github.com/efe9312e64d0e492282e.git",
}

-- Settings ----------------------------------------------------------
debug         = false         -- Use debug mode (mainly does not clean cache).
verbose       = false         -- Print verbose output (does nothing?).

-- Available log levels are: DEBUG, INFO, WARN, ERROR, FATAL (see dist.logger for more information).
print_log_level = "WARN"      -- Minimum level for log messages to be printed (nil to disable).
write_log_level = "INFO"      -- Minimum level for log messages to be logged (nil to disable).


-- CMake variables ---------------------------------------------------
variables = {
  --- Install defaults
  INSTALL_BIN                        = "bin",
  INSTALL_LIB                        = "lib",
  INSTALL_ETC                        = "etc",
  INSTALL_SHARE                      = "share",
  INSTALL_LMOD                       = path.join("lib", "lua"),
  INSTALL_CMOD                       = "lib",
}

if (variables.CMAKE_GENERATOR == "MinGW Makefiles") then
  -- Static Linking (For MinGW)
  variables.CMAKE_EXE_LINKER_FLAGS             = "-static-libgcc -static-libstdc++ -static"
  variables.CMAKE_SHARED_LINKER_FLAGS          = "-static-libgcc -static-libstdc++ -static"
  variables.CMAKE_MODULE_LINKER_FLAGS          = "-static-libgcc -static-libstdc++ -static"
end

-- Building ----------------------------------------------------------
cmake         = "cmake"

cache_command = cmake .. " -C cache.cmake"
build_command = cmake .. " --build . --clean-first"

cache_debug_options = "-DCMAKE_VERBOSE_MAKEFILE=true -DCMAKE_BUILD_TYPE=Debug"
build_debug_options = ""

-- Add -j option to make in case of unix makefiles to speed up builds
if (variables.CMAKE_GENERATOR == "Unix Makefiles") then
        build_command = build_command .. " -- -j6"
end

-- Add -j option to make in case of MinGW makefiles to speed up builds
if (variables.CMAKE_GENERATOR == "MinGW Makefiles") then
        build_command = "set SHELL=cmd.exe && " .. build_command .. " -- -j"
end
